name: To check matrix cluster name
on: workflow_dispatch

jobs:
  matrix-check:
    strategy:
      fail-fast: false
      matrix:
        cluster:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.cluster }}

    steps:
      - name: Deploy to ${{ matrix.cluster }}
        id: deploy
        continue-on-error: true
        shell: bash
        run: |
          echo "Deploying on ${{ matrix.cluster }}"

          if [[ "${{ matrix.cluster }}" == "windows-latest" ]]; then
              exit 1
          fi

      - name: Write status file
        id: write-status
        if: always()
        shell: bash
        run: |
          if [[ "${{ steps.deploy.outcome }}" == "failure" ]]; then
            status=failed
          else
            status=success
          fi
          echo "${{ matrix.cluster }}=${status}" > status.txt

      - name: Upload status artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: status-${{ matrix.cluster }}
          path: status.txt

  aggregate-status:
    needs: matrix-check
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download ubuntu status artifact
        uses: actions/download-artifact@v4
        with:
          name: status-ubuntu-latest
          path: ./statuses/ubuntu

      - name: Download windows status artifact
        uses: actions/download-artifact@v4
        with:
          name: status-windows-latest
          path: ./statuses/windows

      - name: Display failed clusters
        shell: bash
        run: |
          failed_clusters=()

          # Paths to status files
          ubuntu_status_file=./statuses/ubuntu/status.txt
          windows_status_file=./statuses/windows/status.txt

          # Check and read ubuntu status
          if [[ -f "$ubuntu_status_file" ]]; then
            cluster=$(cut -d'=' -f1 "$ubuntu_status_file")
            state=$(cut -d'=' -f2 "$ubuntu_status_file")
            if [[ "$state" == "failed" ]]; then
              failed_clusters+=(Ubuntu)
            fi
          else
            echo "Ubuntu status file not found!"
          fi

          # Check and read windows status
          if [[ -f "$windows_status_file" ]]; then
            cluster=$(cut -d'=' -f1 "$windows_status_file")
            state=$(cut -d'=' -f2 "$windows_status_file")
            if [[ "$state" == "failed" ]]; then
              failed_clusters+=(Windows)
            fi
          else
            echo "Windows status file not found!"
          fi

          echo "Failed clusters: ${failed_clusters[*]}"
